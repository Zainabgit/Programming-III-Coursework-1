/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package toothcare;

/**
 *
 * @author Acer
 */
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.LocalTime;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import print.ReportManager;
import print.model.FieldReportPayment;
import print.model.ParameterReportPayment;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.RowFilter;
import javax.swing.SortOrder;

public class Appoiment extends javax.swing.JFrame {
    
// Private fields encapsulated within the class
    
    private Patient patientFrame;
    private Dashboard dashbboardFrame;
    public ArrayList<patientOb> patientList;
    public ArrayList<AppointmentObj> appointmentList;
    
     // Public methods to control access to these fields
    
    public Appoiment(Dashboard dashbboardFrame,Patient patientFrame) {
        initComponents();
        appointmentList = new ArrayList<>();
        this.patientFrame = patientFrame;
        this.dashbboardFrame = dashbboardFrame;
//        patientList = patientFrame.getPatientList();
//        for (patientOb patient: patientList){
//        patientsComboList.addItem(patient.getName());
//        }
        
        populatePatientComboBox();
    }
    
// Method to set the Patient frame
    
    public void setPatientFrame(Patient patientFrame) {
        this.patientFrame = patientFrame;
        
        populatePatientComboBox();
    }
    
// Method to set the Dashboard frame
    
    public void setDashbboardFrame(Dashboard dashbboardFrame) {
        this.dashbboardFrame = dashbboardFrame;
    }
    
    // Method to access the patientList from Patient class
    public ArrayList<patientOb> getPatientListFromPatientClass() {
        return patientFrame.getPatientList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        appointmentDate = new com.toedter.calendar.JDateChooser();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        appointmentTable = new javax.swing.JTable();
        save = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        patientsComboList = new javax.swing.JComboBox<>();
        time = new com.github.lgooddatepicker.components.TimePicker();
        jLabel3 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        cleaning = new javax.swing.JCheckBox();
        whitening = new javax.swing.JCheckBox();
        filling = new javax.swing.JCheckBox();
        nerveFilling = new javax.swing.JCheckBox();
        rootCanelTherapy = new javax.swing.JCheckBox();
        regFree = new javax.swing.JCheckBox();
        payment = new javax.swing.JCheckBox();
        clear = new javax.swing.JButton();
        invoice = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\Acer\\OneDrive\\Documents\\zainab\\KU Projects\\Programming III\\tooth7-1.jpg")); // NOI18N

        back.setText("BACK");
        back.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 18)); // NOI18N
        back.setForeground(new java.awt.Color(102, 102, 102));
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });

        jLabel4.setText("TOOTH CARE");
        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel16.setText("APPOINTMENT  LIST");
        jLabel16.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(153, 153, 153));

        jLabel17.setText("Patient  ");
        jLabel17.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel18.setText("Date");
        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel19.setText("Time");
        jLabel19.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N

        jLabel24.setText("APPOINTMENT");
        jLabel24.setFont(new java.awt.Font("Century Gothic", 1, 20)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(153, 153, 153));

        appointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Patient Name", "Date", "Time", "Cleaning", "Whitening", "Filling", "Nerve Filling", "Root Canel", "Registration Fee", "Payment"
            }
        ));
        jScrollPane3.setViewportView(appointmentTable);

        save.setText("Save");
        save.setBackground(new java.awt.Color(153, 153, 153));
        save.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        edit.setText("Edit");
        edit.setBackground(new java.awt.Color(153, 153, 153));
        edit.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.setBackground(new java.awt.Color(153, 153, 153));
        delete.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel21.setIcon(new javax.swing.ImageIcon("C:\\Users\\Acer\\OneDrive\\Documents\\zainab\\KU Projects\\Programming III\\close-icon2.png")); // NOI18N
        jLabel21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel21MouseExited(evt);
            }
        });

        patientsComboList.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        patientsComboList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientsComboListActionPerformed(evt);
            }
        });

        jLabel3.setText("Id");

        id.setEditable(false);

        cleaning.setText("Cleaning");
        cleaning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleaningActionPerformed(evt);
            }
        });

        whitening.setText("Whitening");
        whitening.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteningActionPerformed(evt);
            }
        });

        filling.setText("Filling");
        filling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fillingActionPerformed(evt);
            }
        });

        nerveFilling.setText("Nerve Filling");

        rootCanelTherapy.setText("Root Canal Therapy");
        rootCanelTherapy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootCanelTherapyActionPerformed(evt);
            }
        });

        regFree.setText("Registration Free");
        regFree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regFreeActionPerformed(evt);
            }
        });

        payment.setText("Payment");

        clear.setBackground(new java.awt.Color(153, 153, 153));
        clear.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        invoice.setBackground(new java.awt.Color(153, 153, 153));
        invoice.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        invoice.setText("PRINT");
        invoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceActionPerformed(evt);
            }
        });

        search.setText("SEARCH");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        jDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jDateChooserPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel21))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cleaning, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nerveFilling, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(save))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edit)
                                .addGap(45, 45, 45)
                                .addComponent(clear)
                                .addGap(29, 29, 29)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(id, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(patientsComboList, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(appointmentDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(delete)
                                        .addGap(51, 51, 51)
                                        .addComponent(invoice))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(regFree, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rootCanelTherapy, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(whitening, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(70, 70, 70)
                                        .addComponent(filling, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(payment, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(56, 56, Short.MAX_VALUE)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search)
                        .addGap(224, 224, 224)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel21)
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(25, 25, 25)
                        .addComponent(jLabel17))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(patientsComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(appointmentDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cleaning)
                    .addComponent(whitening)
                    .addComponent(filling))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nerveFilling)
                    .addComponent(rootCanelTherapy, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payment)
                    .addComponent(regFree))
                .addGap(34, 34, 34)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save)
                            .addComponent(edit)
                            .addComponent(delete)
                            .addComponent(clear)
                            .addComponent(invoice))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(search)))
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 236, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel14.setText("TOOTH CARE");
        jLabel14.setFont(new java.awt.Font("Century Gothic", 1, 17)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 204, 0));

        jLabel15.setText("DENTAL CLINIC");
        jLabel15.setFont(new java.awt.Font("Century Gothic", 1, 17)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 204, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 81, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(back)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(74, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(8, 8, 8)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addGap(37, 37, 37)
                .addComponent(back)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(974, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 728, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        Date selectedDate = appointmentDate.getDate();
        LocalTime selectedTime = time.getTime();
        String selectedPatient = patientsComboList.getSelectedItem().toString();
        
        if(selectedDate == null || selectedTime == null || selectedPatient.isEmpty()){
            JOptionPane.showMessageDialog(this,"Missing Information");
        }
        else {
            if (id.getText().isEmpty()){
              AppointmentObj appoinment1 = new AppointmentObj(selectedPatient,
                                                              selectedDate,
                                                              selectedTime,
                                                              cleaning.isSelected(),
                                                              whitening.isSelected(),
                                                              filling.isSelected(),
                                                              nerveFilling.isSelected(),
                                                              rootCanelTherapy.isSelected(),
                                                              regFree.isSelected(),
                                                              payment.isSelected());
              
             
             appointmentList.add(appoinment1);
             updateAppointmentTable();
             JOptionPane.showMessageDialog(null, "New appointment added successfully!");
            }
            else {
                String AppointemntIdtoUpdate = id.getText();
                
                for (AppointmentObj app : appointmentList){
                 if(app.getAppointmentId().equals(AppointemntIdtoUpdate)){
                     app.setPatientName(selectedPatient);
                     app.setAppDate(selectedDate);
                     app.setAppTime(selectedTime);
                     app.setCleaning(cleaning.isSelected());
                     app.setWhitening(whitening.isSelected());
                     app.setFilling(filling.isSelected());
                     app.setNerveFilling(nerveFilling.isSelected());
                     app.setRootCanelTherapy(rootCanelTherapy.isSelected());
                     app.setRegistration(regFree.isSelected());
                     app.setPaid(payment.isSelected());
                     
                     updateAppointmentTable();
                     JOptionPane.showMessageDialog(null, "Appointment details updated successfully");
                 }
                
                }
            
            }
        }
        
    }//GEN-LAST:event_saveActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        int selectedRowIndex = appointmentTable.getSelectedRow();
             if (selectedRowIndex != -1) {
             String selectedId = (String) appointmentTable.getValueAt(selectedRowIndex, 0);
             String selectedPatientName = (String) appointmentTable.getValueAt(selectedRowIndex, 1);
             Date selectedAppDate = (Date) appointmentTable.getValueAt(selectedRowIndex, 2);
             LocalTime slectedAppTime = (LocalTime) appointmentTable.getValueAt(selectedRowIndex, 3);
             boolean selectedCleaning = (boolean) appointmentTable.getValueAt(selectedRowIndex, 4);
             boolean selectedwhitening = (boolean) appointmentTable.getValueAt(selectedRowIndex, 5);
             boolean selectedFilling = (boolean) appointmentTable.getValueAt(selectedRowIndex, 6);
             boolean selectedNerveFilling = (boolean) appointmentTable.getValueAt(selectedRowIndex, 7);
             boolean selectedRootCanel = (boolean) appointmentTable.getValueAt(selectedRowIndex, 8);
             boolean selectedRegistration = (boolean) appointmentTable.getValueAt(selectedRowIndex, 9);
             boolean selectedPaid = (boolean) appointmentTable.getValueAt(selectedRowIndex, 10);
             
             id.setText(selectedId);
             patientsComboList.setSelectedItem(selectedPatientName);
             appointmentDate.setDate(selectedAppDate);
             time.setTime(slectedAppTime);
             cleaning.setSelected(selectedCleaning);
             whitening.setSelected(selectedwhitening);
             filling.setSelected(selectedFilling);
             nerveFilling.setSelected(selectedNerveFilling);
             rootCanelTherapy.setSelected(selectedRootCanel);
             regFree.setSelected(selectedRegistration);
             payment.setSelected(selectedPaid);
             }
             else {
            // If no row is selected, display an error message or handle accordingly
            JOptionPane.showMessageDialog(null, "Please select a row to edit!");
        }
    }//GEN-LAST:event_editActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int selectedRowIndex = appointmentTable.getSelectedRow();
         if (selectedRowIndex != -1) {
             int confirmDialogResult = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to delete this record?", "Confirmation", JOptionPane.YES_NO_OPTION);
             
             if (confirmDialogResult == JOptionPane.YES_OPTION) {
                 appointmentList.remove(selectedRowIndex);
                 
                 updateAppointmentTable();
             }
         }
         else {
            // If no row is selected, display an error message or handle accordingly
            JOptionPane.showMessageDialog(null, "Please select a row to delete!");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void jLabel21MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseExited
 // Close the application when the Close label is clicked
    System.exit(0);        
    }//GEN-LAST:event_jLabel21MouseExited

    private void patientsComboListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientsComboListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientsComboListActionPerformed

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
            setVisible(false);
            this.dashbboardFrame.setLocationRelativeTo(null); 
            this.dashbboardFrame.setVisible(true);
    }//GEN-LAST:event_backMouseClicked

    private void cleaningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleaningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cleaningActionPerformed

    private void whiteningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_whiteningActionPerformed

    private void fillingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fillingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fillingActionPerformed

    private void rootCanelTherapyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootCanelTherapyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rootCanelTherapyActionPerformed

    private void regFreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regFreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regFreeActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        id.setText("");
        Object firstItem = patientsComboList.getItemAt(0);
        patientsComboList.setSelectedItem(firstItem);
        appointmentDate.setDate(null);
        time.setTime(null);
        cleaning.setSelected(false);
        whitening.setSelected(false);
        filling.setSelected(false);
        nerveFilling.setSelected(false);
        rootCanelTherapy.setSelected(false);
        payment.setSelected(false);
        regFree.setSelected(false);
    }//GEN-LAST:event_clearActionPerformed

    private void invoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceActionPerformed
        int selectedRowIndex = appointmentTable.getSelectedRow();
        double totalAmount = 0;
             if (selectedRowIndex != -1) {
                    boolean selectedCleaning = (boolean) appointmentTable.getValueAt(selectedRowIndex, 4);
                    boolean selectedwhitening = (boolean) appointmentTable.getValueAt(selectedRowIndex, 5);
                    boolean selectedFilling = (boolean) appointmentTable.getValueAt(selectedRowIndex, 6);
                    boolean selectedNerveFilling = (boolean) appointmentTable.getValueAt(selectedRowIndex, 7);
                    boolean selectedRootCanel = (boolean) appointmentTable.getValueAt(selectedRowIndex, 8);
                    boolean selectedRegistration = (boolean) appointmentTable.getValueAt(selectedRowIndex, 9);
                    String selectedPatientName = (String) appointmentTable.getValueAt(selectedRowIndex, 1);
                    Date selectedAppDate = (Date) appointmentTable.getValueAt(selectedRowIndex, 2);

                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(selectedAppDate);
                    calendar.set(Calendar.HOUR_OF_DAY, 0);
                    calendar.set(Calendar.MINUTE, 0);
                    calendar.set(Calendar.SECOND, 0);
                    calendar.set(Calendar.MILLISECOND, 0);
                    Date dateOnly = calendar.getTime();
                 try {
                     List<FieldReportPayment> fields = new ArrayList<>();
                     
                     if(selectedRegistration){
                         totalAmount += 1000;
                         fields.add(new FieldReportPayment("Registration",1000));
                     }
                     
                     if(selectedCleaning){
                         totalAmount += 3500;
                         fields.add(new FieldReportPayment("Cleaning",3500));
                     }
                     
                     if(selectedwhitening){
                         totalAmount += 5000;
                         fields.add(new FieldReportPayment("Whitening",5000));
                     }
                     
                     if(selectedFilling){
                         totalAmount += 2500;
                         fields.add(new FieldReportPayment("Filling",2500));
                     }
                     
                     if(selectedNerveFilling){
                         totalAmount += 8000;
                         fields.add(new FieldReportPayment("Nerve Filling",8000));
                     }
                     
                     if(selectedRootCanel){
                         totalAmount += 10000;
                         fields.add(new FieldReportPayment("Root Canel Therapy",10000));
                     }
                     
                     ParameterReportPayment dataPrint = new ParameterReportPayment(dateOnly, selectedPatientName, totalAmount,fields);
                     ReportManager.getInstance().printReportPayment(dataPrint);
                 } 
                 catch (Exception e) {
                     e.printStackTrace();
                 }
             }
             
             else {
                 JOptionPane.showMessageDialog(null, "Please select a row to print invoice!");
             }
    }//GEN-LAST:event_invoiceActionPerformed

    private void jDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jDateChooserPropertyChange

    if ("date".equals(evt.getPropertyName())) {
        Date selectedDate = (Date) evt.getNewValue();
        
        DefaultTableModel model = (DefaultTableModel) appointmentTable.getModel();
        
        // Create a TableRowSorter from the appointmentTable's model
        TableRowSorter<DefaultTableModel> rowSorter = new TableRowSorter<>(model);
        appointmentTable.setRowSorter(rowSorter);
        
        // Set the RowFilter to show rows matching the selected date
        RowFilter<Object, Object> dateFilter = new RowFilter<Object, Object>() {
            @Override
            public boolean include(Entry<?, ?> entry) {
                Date dateInTable = (Date) entry.getValue(2); // Assuming column 2 contains the date
                if (dateInTable != null) {
                    Calendar calendar1 = Calendar.getInstance();
                    calendar1.setTime(dateInTable);
                    calendar1.set(Calendar.HOUR_OF_DAY, 0);
                    calendar1.set(Calendar.MINUTE, 0);
                    calendar1.set(Calendar.SECOND, 0);
                    calendar1.set(Calendar.MILLISECOND, 0);
                    Date dateOnlyDateInTable = calendar1.getTime();

                    Calendar calendar2 = Calendar.getInstance();
                    calendar2.setTime(selectedDate);
                    calendar2.set(Calendar.HOUR_OF_DAY, 0);
                    calendar2.set(Calendar.MINUTE, 0);
                    calendar2.set(Calendar.SECOND, 0);
                    calendar2.set(Calendar.MILLISECOND, 0);
                    Date dateOnlySelectedDate = calendar2.getTime();

                    return dateOnlyDateInTable.equals(dateOnlySelectedDate);
                }
                return false;
            }
        };
        rowSorter.setRowFilter(dateFilter);
    }
    }//GEN-LAST:event_jDateChooserPropertyChange

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
       
         String searchText = searchTextField.getText().trim().toLowerCase(); 
         DefaultTableModel model = (DefaultTableModel) appointmentTable.getModel();
         
         TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
         appointmentTable.setRowSorter(sorter);
         
         if (searchText.isEmpty()) {
                sorter.setRowFilter(null); // Clear the filter if the search text is empty
            } else {
                RowFilter<Object, Object> filter = RowFilter.regexFilter("(?i)" + searchText, 0, 1); // 0 - ID column, 1 - Patient Name column
                sorter.setRowFilter(filter); // Apply the filter
            }
    }//GEN-LAST:event_searchActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Appoiment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Appoiment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Appoiment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Appoiment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Appoiment().setVisible(true);
//            }
//        });
//        
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser appointmentDate;
    private javax.swing.JTable appointmentTable;
    private javax.swing.JLabel back;
    private javax.swing.JCheckBox cleaning;
    private javax.swing.JButton clear;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JCheckBox filling;
    private javax.swing.JTextField id;
    private javax.swing.JButton invoice;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox nerveFilling;
    private javax.swing.JComboBox<String> patientsComboList;
    private javax.swing.JCheckBox payment;
    private javax.swing.JCheckBox regFree;
    private javax.swing.JCheckBox rootCanelTherapy;
    private javax.swing.JButton save;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchTextField;
    private com.github.lgooddatepicker.components.TimePicker time;
    private javax.swing.JCheckBox whitening;
    // End of variables declaration//GEN-END:variables

    private void populatePatientComboBox() {
        
        try {
            ReportManager.getInstance().compileReport();
        } catch (Exception e) {
            e.printStackTrace();
        }
            ArrayList<patientOb> patientList2 = patientFrame.getPatientList();
            patientsComboList.removeAllItems();
            if (patientList2 != null) {
            for (patientOb patient : patientList2) {
                patientsComboList.addItem(patient.getName());
            }
            patientsComboList.revalidate();
            patientsComboList.repaint();
            }
        }

    private void updateAppointmentTable() {
        DefaultTableModel model = new DefaultTableModel();
        
        model.addColumn("ID");
        model.addColumn("Patient Name");
        model.addColumn("Date");
        model.addColumn("Time");
        model.addColumn("Cleaning");
        model.addColumn("Whitening");
        model.addColumn("Filling");
        model.addColumn("Nerve Filling");
        model.addColumn("Root Canel");
        model.addColumn("Registration Fee");
        model.addColumn("Payment");
        
        for (AppointmentObj app : appointmentList) {
        Object[] row = {
                app.getAppointmentId(),
                app.getPatientName(),
                app.getAppDate(),
                app.getAppTime(),
                app.isCleaning(),
                app.isWhitening(),
                app.isFilling(),
                app.isNerveFilling(),
                app.isRootCanelTherapy(),
                app.isRegistration(),
                app.isPaid()
        };
        model.addRow(row);
    }

    appointmentTable.setModel(model);
    
        }

   
}
